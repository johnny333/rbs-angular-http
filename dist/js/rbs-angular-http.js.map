{"version":3,"sources":["main.litcoffee","interceptor/URLRewriterInterceptor.litcoffee","interceptor/CacheInterceptor.litcoffee"],"names":[],"mappings":"AAEI;EAAA,OAAO,CAAC,MAAR,CAAe,kBAAf,EAAmC,CACjC,YADiC,EAEjC,kBAFiC,CAAnC;AAAA;;;ACEA;AAAA,MAAA,gEAAA;IAAA;;EAAA,QAAA,GAAW;;EAEL;IAES,gCAAC,QAAD;MAAC,IAAC,CAAA,WAAD;;IAAD;;qCAEb,OAAA,GAAS,SAAC,MAAD;AACP,UAAA;AAAA;AAAA,WAAA,qCAAA;uBAAK,iBAAO;QACV,GAAA,GAAM,MAAM,CAAC;QACb,IAAG,KAAK,CAAC,IAAN,CAAW,GAAX,CAAH;UACE,MAAM,CAAC,GAAP,GAAa,GAAG,CAAC,OAAJ,CAAY,KAAZ,EAAmB,MAAnB;AACb,iBAAO,OAFT;;AAFF;AAKA,aAAO;IANA;;;;;;EAQL;;;6CAEJ,OAAA,GAAS,SAAC,KAAD,EAAQ,MAAR;MACP,IAAA,CAAO,CAAC,CAAC,QAAF,CAAW,KAAX,CAAP;AACE,cAAU,IAAA,KAAA,CAAM,iDAAN,EADZ;;MAEA,IAAA,CAAO,CAAC,CAAC,QAAF,CAAW,MAAX,CAAP;AACE,cAAU,IAAA,KAAA,CAAM,sCAAN,EADZ;;aAEA,QAAQ,CAAC,IAAT,CAAc,CAAC,KAAD,EAAQ,MAAR,CAAd;IALO;;6CAOT,IAAA,GAAM,SAAA;aACA,IAAA,sBAAA,CAAuB,QAAvB;IADA;;;;;;EAGR;;EAEA,CAAC,OAAO,CAAC,MAAR,CAAe,kBAAf,CAAD,CAAmC,CAAC,QAApC,CAA6C,wBAA7C,EAAuE,8BAAvE;AA5BA;;;ACAA;AAAA,MAAA;;;EAAA,CAAC,OAAO,CAAC,MAAR,CAAe,kBAAf,CAAD,CAAmC,CAAC,OAApC,CAA4C,kBAA5C,EAAgE;IAC9D,MAD8D,EAE9D,IAF8D,EAG9D,SAAC,IAAD,EAAO,EAAP;AAEE,UAAA;MAAM;QAES,0BAAA;AAAa,cAAA;UAAZ;UAAA,IAAC,CAAA,QAAD;;;;QAAD;;mCAEb,MAAA,GAAQ,SAAA;AACN,cAAA;AAAA;AAAA;eAAA,qCAAA;;YACE,IAAI,CAAC,KAAL,CAAW,kBAAX,EAA+B,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,EAA5C;yBACA,KAAK,CAAC,SAAN,CAAA;AAFF;;QADM;;mCAKR,QAAA,GAAU,SAAC,QAAD;UACR,IAAC,CAAA,MAAD,CAAA;iBACA,QAAQ,CAAC;QAFD;;mCAIV,aAAA,GAAe,SAAC,KAAD;UACb,IAAC,CAAA,MAAD,CAAA;iBACA,EAAE,CAAC,MAAH,CAAU,KAAV;QAFa;;;;;aAIjB,SAAA;AAAe,YAAA;QAAd;eAAkB;;;;WAAA,gBAAA,EAAiB,MAAjB;MAAnB;IAnBF,CAH8D;GAAhE;AAAA","file":"rbs-angular-http.js","sourcesContent":["Główny moduł:\n\n    angular.module 'rbs-angular-http', [\n      'ngResource'\n      'rbs-angular-core'\n    ]\n","# `URLRewriterInterceptor`\n\nZmienia `url` żądania zgodnie ze skonfigurowanymi wyrażeniami regularnymi.\n\n    REWRITES = []\n\n    class URLRewriterInterceptor\n\n      constructor: (@rewrites) ->\n\n      request: (config) =>\n        for [regex, result] in @rewrites\n          url = config.url\n          if regex.test url\n            config.url = url.replace regex, result\n            return config\n        return config\n\n    class URLRewriterInterceptorProvider\n\n      addRule: (regex, result) ->\n        unless _.isRegExp(regex)\n          throw new Error(\"`regex` argument should be a regular expression\")\n        unless _.isString(result)\n          throw new Error(\"`result` argument should be a string\")\n        REWRITES.push [regex, result]\n\n      $get: ->\n        new URLRewriterInterceptor(REWRITES)\n\n    URLRewriterInterceptorProvider\n\n    (angular.module 'rbs-angular-http').provider 'URLRewriterInterceptor', URLRewriterInterceptorProvider\n","# `CacheInterceptor`\n\nCzyści przekazane `$cacheFactory`.`Cache` po zakończenu żądania.\n\n    (angular.module 'rbs-angular-http').factory 'CacheInterceptor', [\n      '$log'\n      '$q'\n      ($log, $q) ->\n\n        class CacheInterceptor\n\n          constructor: (@cache...) ->\n\n          $flush: () =>\n            for cache in (@cache or [])\n              $log.debug 'Flushing cache: ', cache.info().id\n              cache.removeAll()\n\n          response: (response) =>\n            @$flush()\n            response.resource\n\n          responseError: (error) =>\n            @$flush()\n            $q.reject error\n\n        (caches...) -> new CacheInterceptor(caches...)\n    ]\n"]}