{"version":3,"sources":["main.litcoffee","rbs-angular-http.js","interceptor/URLRewriterInterceptor.litcoffee","interceptor/CacheInterceptor.litcoffee"],"names":["angular","module","call","this","REWRITES","URLRewriterInterceptor","URLRewriterInterceptorProvider","bind","fn","me","apply","arguments","rewrites","request","prototype","config","i","len","ref","ref1","regex","result","url","length","test","replace","addRule","_","isRegExp","Error","isString","push","$get","provider","slice","factory","$log","$q","CacheInterceptor","cache1","cache","responseError","response","$flush","results","debug","info","id","removeAll","resource","error","reject","caches","func","args","ctor","child","Object"],"mappings":"CAEI,WAAAA,QAAQC,OAAO,oBACb,aACA,uBCDHC,KAAKC,MCCJ,WAAA,GAAAC,GAAAC,EAAAC,EAAAC,EAAA,SAAAC,EAAAC,GAAA,MAAA,YAAA,MAAAD,GAAAE,MAAAD,EAAAE,YAAAP,MAEMC,EAAA,WAES,QAAAA,GAACO,GAAAT,KAACS,SAADA,EDMdT,KAAKU,QAAUN,EAAKJ,KAAKU,QAASV,MAiBpC,MAdAE,GAAuBS,UCPrBD,QAAS,SAACE,GACR,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAAA,KAAAJ,EAAAf,KAAAS,SAAAI,EAAA,EAAAC,EAAAC,EAAAK,OAAAN,EAAAD,EAAAA,IAEE,GDQFG,EAAOD,EAAIF,GCVNI,EAAAD,EAAA,GAAOE,EAAAF,EAAA,GACVG,EAAMP,EAAOO,IACVF,EAAMI,KAAKF,GAEZ,MADAP,GAAOO,IAAMA,EAAIG,QAAQL,EAAOC,GACzBN,CACX,OAAOA,IDeJV,KCbDC,EAAA,WDkBN,QAASA,MAgBT,MAdAA,GAA+BQ,UClB7BY,QAAS,SAACN,EAAOC,GACf,IAAOM,EAAEC,SAASR,GAChB,KAAU,IAAAS,OAAM,kDAClB,KAAOF,EAAEG,SAAST,GAChB,KAAU,IAAAQ,OAAM,uCDqBpB,OCpBEzB,GAAS2B,MAAMX,EAAOC,KDuB1Bf,EAA+BQ,UCrB7BkB,KAAM,WDsBN,MCrBM,IAAA3B,GAAuBD,IDwBxBE,KCpBNN,QAAQC,OAAO,oBAAoBgC,SAAS,yBAA0B3B,ID4BxEJ,KAAKC,MExDJ,WAAA,GAAAI,GAAA,SAAAC,EAAAC,GAAA,MAAA,YAAA,MAAAD,GAAAE,MAAAD,EAAAE,aF4DAuB,KAAWA,KE5DVlC,SAAQC,OAAO,oBAAoBkC,QAAQ,oBAC1C,OACA,KACA,SAACC,EAAMC,GAEL,GAAAC,EF+FF,OE/FQA,GAAA,WAES,QAAAA,KAAa,GAAAC,EAAZA,GAAA,GAAA5B,UAAAY,OAAAW,EAAAhC,KAAAS,UAAA,MAAAR,KAACqC,MAADD,EF+DdpC,KAAKsC,cAAgBlC,EAAKJ,KAAKsC,cAAetC,MAC9CA,KAAKuC,SAAWnC,EAAKJ,KAAKuC,SAAUvC,MACpCA,KAAKwC,OAASpC,EAAKJ,KAAKwC,OAAQxC,MAyBlC,MAtBAmC,GAAiBxB,UElEf6B,OAAQ,WACN,GAAAH,GAAAxB,EAAAC,EAAAC,EAAA0B,CFqEF,KErEE1B,EAAAf,KAAAqC,UAAAI,KAAA5B,EAAA,EAAAC,EAAAC,EAAAK,OAAAN,EAAAD,EAAAA,IFsEAwB,EAAQtB,EAAIF,GErEVoB,EAAKS,MAAM,mBAAoBL,EAAMM,OAAOC,IFuE9CH,EAAQb,KEtENS,EAAMQ,YFwEV,OAAOJ,IAGTN,EAAiBxB,UEzEf4B,SAAU,SAACA,GF2EX,ME1EEvC,MAACwC,SACDD,EAASO,UF4EbX,EAAiBxB,UE1Ef2B,cAAe,SAACS,GF4EhB,ME3EE/C,MAACwC,SACDN,EAAGc,OAAOD,IF6EPZ,KE3EP,WAAe,GAAAc,EFiFf,OEjFCA,GAAA,GAAAzC,UAAAY,OAAAW,EAAAhC,KAAAS,UAAA,MAAkB,SAAA0C,EAAAC,EAAAC,GFkFjBA,EAAKzC,UAAYuC,EAAKvC,SACtB,IAAI0C,GAAQ,GAAID,GAAMlC,EAASgC,EAAK3C,MAAM8C,EAAOF,EACjD,OAAOG,QAAOpC,KAAYA,EAASA,EAASmC,GEpF3BlB,EAAiBc,EAAjB,mBF0FxBlD,KAAKC","file":"rbs-angular-http.min.js","sourcesContent":["Główny moduł:\n\n    angular.module 'rbs-angular-http', [\n      'ngResource'\n      'rbs-angular-core'\n    ]\n","(function() {\n  angular.module('rbs-angular-http', ['ngResource', 'rbs-angular-core']);\n\n}).call(this);\n\n(function() {\n  var REWRITES, URLRewriterInterceptor, URLRewriterInterceptorProvider,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  REWRITES = [];\n\n  URLRewriterInterceptor = (function() {\n    function URLRewriterInterceptor(rewrites) {\n      this.rewrites = rewrites;\n      this.request = bind(this.request, this);\n    }\n\n    URLRewriterInterceptor.prototype.request = function(config) {\n      var i, len, ref, ref1, regex, result, url;\n      ref = this.rewrites;\n      for (i = 0, len = ref.length; i < len; i++) {\n        ref1 = ref[i], regex = ref1[0], result = ref1[1];\n        url = config.url;\n        if (regex.test(url)) {\n          config.url = url.replace(regex, result);\n          return config;\n        }\n      }\n      return config;\n    };\n\n    return URLRewriterInterceptor;\n\n  })();\n\n  URLRewriterInterceptorProvider = (function() {\n    function URLRewriterInterceptorProvider() {}\n\n    URLRewriterInterceptorProvider.prototype.addRule = function(regex, result) {\n      if (!_.isRegExp(regex)) {\n        throw new Error(\"`regex` argument should be a regular expression\");\n      }\n      if (!_.isString(result)) {\n        throw new Error(\"`result` argument should be a string\");\n      }\n      return REWRITES.push([regex, result]);\n    };\n\n    URLRewriterInterceptorProvider.prototype.$get = function() {\n      return new URLRewriterInterceptor(REWRITES);\n    };\n\n    return URLRewriterInterceptorProvider;\n\n  })();\n\n  URLRewriterInterceptorProvider;\n\n  (angular.module('rbs-angular-http')).provider('URLRewriterInterceptor', URLRewriterInterceptorProvider);\n\n}).call(this);\n\n(function() {\n  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    slice = [].slice;\n\n  (angular.module('rbs-angular-http')).factory('CacheInterceptor', [\n    '$log', '$q', function($log, $q) {\n      var CacheInterceptor;\n      CacheInterceptor = (function() {\n        function CacheInterceptor() {\n          var cache1;\n          cache1 = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          this.cache = cache1;\n          this.responseError = bind(this.responseError, this);\n          this.response = bind(this.response, this);\n          this.$flush = bind(this.$flush, this);\n        }\n\n        CacheInterceptor.prototype.$flush = function() {\n          var cache, i, len, ref, results;\n          ref = this.cache || [];\n          results = [];\n          for (i = 0, len = ref.length; i < len; i++) {\n            cache = ref[i];\n            $log.debug('Flushing cache: ', cache.info().id);\n            results.push(cache.removeAll());\n          }\n          return results;\n        };\n\n        CacheInterceptor.prototype.response = function(response) {\n          this.$flush();\n          return response.resource;\n        };\n\n        CacheInterceptor.prototype.responseError = function(error) {\n          this.$flush();\n          return $q.reject(error);\n        };\n\n        return CacheInterceptor;\n\n      })();\n      return function() {\n        var caches;\n        caches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        return (function(func, args, ctor) {\n          ctor.prototype = func.prototype;\n          var child = new ctor, result = func.apply(child, args);\n          return Object(result) === result ? result : child;\n        })(CacheInterceptor, caches, function(){});\n      };\n    }\n  ]);\n\n}).call(this);\n\n//# sourceMappingURL=rbs-angular-http.js.map\n","# `URLRewriterInterceptor`\n\nZmienia `url` żądania zgodnie ze skonfigurowanymi wyrażeniami regularnymi.\n\n    REWRITES = []\n\n    class URLRewriterInterceptor\n\n      constructor: (@rewrites) ->\n\n      request: (config) =>\n        for [regex, result] in @rewrites\n          url = config.url\n          if regex.test url\n            config.url = url.replace regex, result\n            return config\n        return config\n\n    class URLRewriterInterceptorProvider\n\n      addRule: (regex, result) ->\n        unless _.isRegExp(regex)\n          throw new Error(\"`regex` argument should be a regular expression\")\n        unless _.isString(result)\n          throw new Error(\"`result` argument should be a string\")\n        REWRITES.push [regex, result]\n\n      $get: ->\n        new URLRewriterInterceptor(REWRITES)\n\n    URLRewriterInterceptorProvider\n\n    (angular.module 'rbs-angular-http').provider 'URLRewriterInterceptor', URLRewriterInterceptorProvider\n","# `CacheInterceptor`\n\nCzyści przekazane `$cacheFactory`.`Cache` po zakończenu żądania.\n\n    (angular.module 'rbs-angular-http').factory 'CacheInterceptor', [\n      '$log'\n      '$q'\n      ($log, $q) ->\n\n        class CacheInterceptor\n\n          constructor: (@cache...) ->\n\n          $flush: () =>\n            for cache in (@cache or [])\n              $log.debug 'Flushing cache: ', cache.info().id\n              cache.removeAll()\n\n          response: (response) =>\n            @$flush()\n            response.resource\n\n          responseError: (error) =>\n            @$flush()\n            $q.reject error\n\n        (caches...) -> new CacheInterceptor(caches...)\n    ]\n"]}